version: '3.8'

services:
  # Frontend Services
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: investment-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - app-network

  # API Gateway
  api-gateway:
    image: kong:3.4-alpine
    container_name: api-gateway
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong123
      - KONG_PG_DATABASE=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      - postgres
      - auth-service
      - market-data-service
      - analytics-service
    networks:
      - app-network

  # Microservices
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/investment_db
      - JWT_SECRET=your-secret-key-here
      - JWT_EXPIRES_IN=7d
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  market-data-service:
    build:
      context: ./services/market-data
      dockerfile: Dockerfile
    container_name: market-data-service
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/investment_db
      - MONGO_URL=mongodb://mongo:27017/market_data
      - REDIS_URL=redis://redis:6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET=${BINANCE_SECRET}
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - mongo
      - redis
    networks:
      - app-network

  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: analytics-service
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/investment_db
      - MONGO_URL=mongodb://mongo:27017/market_data
      - REDIS_URL=redis://redis:6379
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=investment-platform
      - INFLUXDB_BUCKET=metrics
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - mongo
      - redis
      - influxdb
    networks:
      - app-network

  notification-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/investment_db
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # Data Processing Services
  scheduler:
    build:
      context: ./services/scheduler
      dockerfile: Dockerfile
    container_name: scheduler
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/investment_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - app-network

  worker:
    build:
      context: ./services/worker
      dockerfile: Dockerfile
    container_name: worker
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/investment_db
      - MONGO_URL=mongodb://mongo:27017/market_data
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    deploy:
      replicas: 3
    depends_on:
      - postgres
      - mongo
      - redis
      - rabbitmq
    networks:
      - app-network

  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=investment_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - app-network

  mongo:
    image: mongo:6
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=market_data
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./init-mongo:/docker-entrypoint-initdb.d
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=investment-platform
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - app-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3005:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - influxdb
    networks:
      - app-network

  # Logging Stack
  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network

  kibana:
    image: kibana:8.11.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  # Development Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin123@mongo:27017/
    ports:
      - "8081:8081"
    depends_on:
      - mongo
    networks:
      - app-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - api-gateway
      - frontend
    networks:
      - app-network
    profiles:
      - production

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  influxdb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge